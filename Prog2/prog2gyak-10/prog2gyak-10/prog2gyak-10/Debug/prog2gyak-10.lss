
prog2gyak-10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d9  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000121  00000000  00000000  00001dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 35       	cpi	r26, 0x5E	; 94
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	2d d0       	rcall	.+90     	; 0x10e <main>
  b4:	94 c0       	rjmp	.+296    	; 0x1de <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <uart_init>:
		uart_transmit_string("\r\n");
    }
}

void uart_init() {
	UBRR0H = 0;
  b8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 51; //
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1<<RXEN) | (1<<TXEN);
  c0:	88 e1       	ldi	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (0<<USBS0) | (1<<UCSZ00) | (1<<UCSZ01);
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  ca:	08 95       	ret

000000cc <port_init>:
}

void port_init() {
	DDRC |= 0x80;
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	08 95       	ret

000000d4 <uart_transmit>:
}

void uart_transmit(unsigned char adat) {
	while (!(UCSR0A & (1<<UDRE0))); //Ciklusban várakozik amíg nem üres a küldés-buffer
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <uart_transmit>
	
	UDR0 = adat;
  d8:	8c b9       	out	0x0c, r24	; 12
  da:	08 95       	ret

000000dc <uart_receive>:
}

unsigned char uart_receive() {
	while (!(UCSR0A & (1<<RXC))); //Wait for data to arrive
  dc:	5f 9b       	sbis	0x0b, 7	; 11
  de:	fe cf       	rjmp	.-4      	; 0xdc <uart_receive>
	
	return UDR0;
  e0:	8c b1       	in	r24, 0x0c	; 12
}
  e2:	08 95       	ret

000000e4 <uart_transmit_string>:

void uart_transmit_string(char *string) {
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	8c 01       	movw	r16, r24
	int i = 0;
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
	while (string[i]) {
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <uart_transmit_string+0x14>
		uart_transmit(string[i]);
  f4:	ef df       	rcall	.-34     	; 0xd4 <uart_transmit>
		i++;
  f6:	21 96       	adiw	r28, 0x01	; 1
	return UDR0;
}

void uart_transmit_string(char *string) {
	int i = 0;
	while (string[i]) {
  f8:	f8 01       	movw	r30, r16
  fa:	ec 0f       	add	r30, r28
  fc:	fd 1f       	adc	r31, r29
  fe:	80 81       	ld	r24, Z
 100:	81 11       	cpse	r24, r1
 102:	f8 cf       	rjmp	.-16     	; 0xf4 <uart_transmit_string+0x10>
		uart_transmit(string[i]);
		i++;
	}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <main>:
void uart_transmit(unsigned char adat);
unsigned char uart_receive();
void uart_transmit_string(char *string);

int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	2c 97       	sbiw	r28, 0x0c	; 12
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	unsigned char tmp[10];
	
	unsigned char *menu[6] = {
 122:	8c e0       	ldi	r24, 0x0C	; 12
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x1e>
		"GREEN LED OFF",
		"BLUE LED ON",
		"BLUE LED OFF"
	};
	
	port_init();
 134:	cb df       	rcall	.-106    	; 0xcc <port_init>
	uart_init();
 136:	c0 df       	rcall	.-128    	; 0xb8 <uart_init>
 138:	00 e0       	ldi	r16, 0x00	; 0
	
	for (int i = 0; i < 6; i++) {
 13a:	10 e0       	ldi	r17, 0x00	; 0
 13c:	17 c0       	rjmp	.+46     	; 0x16c <main+0x5e>
 13e:	81 e3       	ldi	r24, 0x31	; 49
		uart_transmit(i + 1 + '0');
 140:	80 0f       	add	r24, r16
 142:	c8 df       	rcall	.-112    	; 0xd4 <uart_transmit>
 144:	8c e0       	ldi	r24, 0x0C	; 12
		uart_transmit_string(". ");
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	cd df       	rcall	.-102    	; 0xe4 <uart_transmit_string>
 14a:	f8 01       	movw	r30, r16
 14c:	ee 0f       	add	r30, r30
		uart_transmit_string(menu[i]);
 14e:	ff 1f       	adc	r31, r31
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	8c 0f       	add	r24, r28
 156:	9d 1f       	adc	r25, r29
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
 15c:	80 81       	ld	r24, Z
 15e:	91 81       	ldd	r25, Z+1	; 0x01
 160:	c1 df       	rcall	.-126    	; 0xe4 <uart_transmit_string>
 162:	8f e0       	ldi	r24, 0x0F	; 15
		uart_transmit_string("\r\n");
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	be df       	rcall	.-132    	; 0xe4 <uart_transmit_string>
 168:	0f 5f       	subi	r16, 0xFF	; 255
	};
	
	port_init();
	uart_init();
	
	for (int i = 0; i < 6; i++) {
 16a:	1f 4f       	sbci	r17, 0xFF	; 255
 16c:	06 30       	cpi	r16, 0x06	; 6
 16e:	11 05       	cpc	r17, r1
 170:	34 f3       	brlt	.-52     	; 0x13e <main+0x30>
 172:	b4 df       	rcall	.-152    	; 0xdc <uart_receive>
    
	unsigned char c;
	
    while (1) 
    {
		switch(c = uart_receive()) {
 174:	83 33       	cpi	r24, 0x33	; 51
 176:	a1 f0       	breq	.+40     	; 0x1a0 <main+0x92>
 178:	28 f4       	brcc	.+10     	; 0x184 <main+0x76>
 17a:	81 33       	cpi	r24, 0x31	; 49
 17c:	49 f0       	breq	.+18     	; 0x190 <main+0x82>
 17e:	82 33       	cpi	r24, 0x32	; 50
 180:	59 f0       	breq	.+22     	; 0x198 <main+0x8a>
 182:	1b c0       	rjmp	.+54     	; 0x1ba <main+0xac>
 184:	85 33       	cpi	r24, 0x35	; 53
 186:	99 f0       	breq	.+38     	; 0x1ae <main+0xa0>
 188:	78 f0       	brcs	.+30     	; 0x1a8 <main+0x9a>
 18a:	86 33       	cpi	r24, 0x36	; 54
 18c:	a1 f0       	breq	.+40     	; 0x1b6 <main+0xa8>
 18e:	15 c0       	rjmp	.+42     	; 0x1ba <main+0xac>
 190:	95 b3       	in	r25, 0x15	; 21
 192:	90 68       	ori	r25, 0x80	; 128
			case '1': PORTC |= 0x80; break;
 194:	95 bb       	out	0x15, r25	; 21
 196:	11 c0       	rjmp	.+34     	; 0x1ba <main+0xac>
 198:	95 b3       	in	r25, 0x15	; 21
 19a:	9f 77       	andi	r25, 0x7F	; 127
			case '2': PORTC &= 0x7F; break;
 19c:	95 bb       	out	0x15, r25	; 21
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <main+0xac>
 1a0:	93 b1       	in	r25, 0x03	; 3
 1a2:	98 60       	ori	r25, 0x08	; 8
			case '3': PORTE |= (1<<3); break;
 1a4:	93 b9       	out	0x03, r25	; 3
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <main+0xac>
 1a8:	93 b1       	in	r25, 0x03	; 3
 1aa:	13 b8       	out	0x03, r1	; 3
			case '4': PORTE &= (0<<3); break;
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <main+0xac>
 1ae:	93 b1       	in	r25, 0x03	; 3
 1b0:	94 60       	ori	r25, 0x04	; 4
			case '5': PORTE |= (1<<2); break;
 1b2:	93 b9       	out	0x03, r25	; 3
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0xac>
 1b6:	93 b1       	in	r25, 0x03	; 3
 1b8:	13 b8       	out	0x03, r1	; 3
			case '6': PORTE &= (0<<2); break;
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
		}
		uart_transmit_string(menu[c - 1 - '0']);
 1be:	f1 97       	sbiw	r30, 0x31	; 49
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	8c 0f       	add	r24, r28
 1ca:	9d 1f       	adc	r25, r29
 1cc:	e8 0f       	add	r30, r24
 1ce:	f9 1f       	adc	r31, r25
 1d0:	80 81       	ld	r24, Z
 1d2:	91 81       	ldd	r25, Z+1	; 0x01
 1d4:	87 df       	rcall	.-242    	; 0xe4 <uart_transmit_string>
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
		uart_transmit_string("\r\n");
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	84 df       	rcall	.-248    	; 0xe4 <uart_transmit_string>
 1dc:	ca cf       	rjmp	.-108    	; 0x172 <main+0x64>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
    }
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
