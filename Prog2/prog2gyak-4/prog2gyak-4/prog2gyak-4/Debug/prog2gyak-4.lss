
prog2gyak-4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf0  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ae  00000000  00000000  000018cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049a  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d0       	rcall	.+280    	; 0x1dc <main>
  c4:	07 c1       	rjmp	.+526    	; 0x2d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <runLeft>:
	}
	return 0;
}

unsigned char runLeft(unsigned char led) {
	if (led & 0x80) led = 0x01;
  c8:	88 23       	and	r24, r24
  ca:	14 f0       	brlt	.+4      	; 0xd0 <runLeft+0x8>
	else led = led << 1; 
  cc:	88 0f       	add	r24, r24
  ce:	08 95       	ret
	}
	return 0;
}

unsigned char runLeft(unsigned char led) {
	if (led & 0x80) led = 0x01;
  d0:	81 e0       	ldi	r24, 0x01	; 1
	else led = led << 1; 
	return led;
}
  d2:	08 95       	ret

000000d4 <runRight>:
unsigned char runRight(unsigned char led) {
	if (led & 0x01) led = 0x80;
  d4:	80 fd       	sbrc	r24, 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <runRight+0x8>
	else led = led >> 1;
  d8:	86 95       	lsr	r24
  da:	08 95       	ret
	if (led & 0x80) led = 0x01;
	else led = led << 1; 
	return led;
}
unsigned char runRight(unsigned char led) {
	if (led & 0x01) led = 0x80;
  dc:	80 e8       	ldi	r24, 0x80	; 128
	else led = led >> 1;
	return led;
}
  de:	08 95       	ret

000000e0 <backAndForth>:
unsigned char backAndForth(unsigned char led) {
	static unsigned char direction = 0x01;
	if (direction) {
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction.1764>
  e4:	99 23       	and	r25, r25
  e6:	39 f0       	breq	.+14     	; 0xf6 <backAndForth+0x16>
		if (led & 0x80) direction = 0;
  e8:	88 23       	and	r24, r24
  ea:	1c f4       	brge	.+6      	; 0xf2 <backAndForth+0x12>
  ec:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction.1764>
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <backAndForth+0x16>
		else {
			led = led << 1;
  f2:	88 0f       	add	r24, r24
			return led;
  f4:	08 95       	ret
		}
	} 
	if (led & 0x01) {
  f6:	80 ff       	sbrs	r24, 0
  f8:	04 c0       	rjmp	.+8      	; 0x102 <backAndForth+0x22>
		direction = 1;
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction.1764>
		return led;
 100:	08 95       	ret
	}
	else led = led >> 1;
 102:	86 95       	lsr	r24
	return led;
}
 104:	08 95       	ret

00000106 <nightRider>:
unsigned char nightRider(unsigned char led) {
	static unsigned char led1 = 0x01, led2 = 0x80;
	
	if (led1 == 0x80) led1=0x01;
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led1.1768>
 10a:	80 38       	cpi	r24, 0x80	; 128
 10c:	21 f4       	brne	.+8      	; 0x116 <nightRider+0x10>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led1.1768>
 114:	03 c0       	rjmp	.+6      	; 0x11c <nightRider+0x16>
	else led1 = led1 << 1;
 116:	88 0f       	add	r24, r24
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led1.1768>
	
	if (led2 == 0x01) led2=0x80;
 11c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led2.1769>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	21 f4       	brne	.+8      	; 0x12c <nightRider+0x26>
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led2.1769>
 12a:	03 c0       	rjmp	.+6      	; 0x132 <nightRider+0x2c>
	else led2 = led2 >> 1;
 12c:	86 95       	lsr	r24
 12e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led2.1769>
	
	return led1 | led2;
 132:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <led1.1768>
 136:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led2.1769>
}
 13a:	89 2b       	or	r24, r25
 13c:	08 95       	ret

0000013e <sevenSegment>:
void sevenSegment(unsigned int ertekO) {
	static unsigned char digit = 4;
	static unsigned int ertek;
	if (digit < 4) {
 13e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	44 30       	cpi	r20, 0x04	; 4
 144:	b8 f5       	brcc	.+110    	; 0x1b4 <sevenSegment+0x76>
		PORTA = 0x80 | digit << 4 | ertek % 10;
 146:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 14a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 14e:	9f 01       	movw	r18, r30
 150:	ad ec       	ldi	r26, 0xCD	; 205
 152:	bc ec       	ldi	r27, 0xCC	; 204
 154:	b0 d0       	rcall	.+352    	; 0x2b6 <__umulhisi3>
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	9c 01       	movw	r18, r24
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	9f 01       	movw	r18, r30
 17a:	28 1b       	sub	r18, r24
 17c:	39 0b       	sbc	r19, r25
 17e:	c9 01       	movw	r24, r18
 180:	42 95       	swap	r20
 182:	40 7f       	andi	r20, 0xF0	; 240
 184:	84 2b       	or	r24, r20
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b bb       	out	0x1b, r24	; 27
		ertek = ertek / 10;
 18a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 18e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 192:	91 d0       	rcall	.+290    	; 0x2b6 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1a4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		digit++;
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	08 95       	ret
	} else {
		digit = 0;
 1b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		ertek = ertekO;
 1b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1c0:	08 95       	ret

000001c2 <ledOut>:
	}
	return;
}

void ledOut(unsigned char led) {
	PORTD = led;
 1c2:	82 bb       	out	0x12, r24	; 18
	PORTB = led << 4;
 1c4:	82 95       	swap	r24
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	08 95       	ret

000001cc <portInit>:
}

void portInit() {
	DDRA = 0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xF0;
 1d0:	80 ef       	ldi	r24, 0xF0	; 240
 1d2:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xF0;
 1d4:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x00;
 1d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 1da:	08 95       	ret

000001dc <main>:
unsigned char nightRider(unsigned char led);
void sevenSegment(unsigned int ertek);

int main(void)
{
    portInit();
 1dc:	f7 df       	rcall	.-18     	; 0x1cc <portInit>
	unsigned char led = 0x01;
	
	unsigned char button = 0x00;
 1de:	80 e0       	ldi	r24, 0x00	; 0
void sevenSegment(unsigned int ertek);

int main(void)
{
    portInit();
	unsigned char led = 0x01;
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <main+0xa>
unsigned char backAndForth(unsigned char led);
unsigned char nightRider(unsigned char led);
void sevenSegment(unsigned int ertek);

int main(void)
{
 1e4:	8c 2f       	mov	r24, r28
	
	unsigned char button = 0x00;
	while(1) {
		static unsigned char oldButton;
		oldButton = button;
		button = PING ? PING : button;
 1e6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 1ea:	99 23       	and	r25, r25
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <main+0x18>
 1ee:	c0 91 63 00 	lds	r28, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <main+0x1a>
 1f4:	c8 2f       	mov	r28, r24
		if (oldButton != button) {
 1f6:	8c 17       	cp	r24, r28
 1f8:	59 f0       	breq	.+22     	; 0x210 <main+0x34>
			if (!((oldButton == 1 || oldButton == 2) && (button == 1 || button == 2))) led = 0x01;
 1fa:	81 50       	subi	r24, 0x01	; 1
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	28 f4       	brcc	.+10     	; 0x20a <main+0x2e>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	8c 0f       	add	r24, r28
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	18 f4       	brcc	.+6      	; 0x20e <main+0x32>
 208:	03 c0       	rjmp	.+6      	; 0x210 <main+0x34>
 20a:	d1 e0       	ldi	r29, 0x01	; 1
 20c:	01 c0       	rjmp	.+2      	; 0x210 <main+0x34>
 20e:	d1 e0       	ldi	r29, 0x01	; 1
		}
		oldButton = button;
		switch(button) {
 210:	c4 30       	cpi	r28, 0x04	; 4
 212:	41 f1       	breq	.+80     	; 0x264 <main+0x88>
 214:	28 f4       	brcc	.+10     	; 0x220 <main+0x44>
 216:	c1 30       	cpi	r28, 0x01	; 1
 218:	49 f0       	breq	.+18     	; 0x22c <main+0x50>
 21a:	c2 30       	cpi	r28, 0x02	; 2
 21c:	a9 f0       	breq	.+42     	; 0x248 <main+0x6c>
 21e:	48 c0       	rjmp	.+144    	; 0x2b0 <main+0xd4>
 220:	c8 30       	cpi	r28, 0x08	; 8
 222:	71 f1       	breq	.+92     	; 0x280 <main+0xa4>
 224:	c0 31       	cpi	r28, 0x10	; 16
 226:	09 f4       	brne	.+2      	; 0x22a <main+0x4e>
 228:	39 c0       	rjmp	.+114    	; 0x29c <main+0xc0>
 22a:	42 c0       	rjmp	.+132    	; 0x2b0 <main+0xd4>
			case 1:
				led = runLeft(led);
 22c:	8d 2f       	mov	r24, r29
 22e:	4c df       	rcall	.-360    	; 0xc8 <runLeft>
				ledOut(led);
 230:	d8 2f       	mov	r29, r24
 232:	c7 df       	rcall	.-114    	; 0x1c2 <ledOut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	80 e7       	ldi	r24, 0x70	; 112
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x5e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x68>
 244:	00 00       	nop
				_delay_ms(100);
				break;
			case 2:
				led = runRight(led);
 246:	ce cf       	rjmp	.-100    	; 0x1e4 <main+0x8>
 248:	8d 2f       	mov	r24, r29
 24a:	44 df       	rcall	.-376    	; 0xd4 <runRight>
				ledOut(led);
 24c:	d8 2f       	mov	r29, r24
 24e:	b9 df       	rcall	.-142    	; 0x1c2 <ledOut>
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x7a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x84>
				_delay_ms(100);
				break;
			case 4:
				led = backAndForth(led);
 260:	00 00       	nop
 262:	c0 cf       	rjmp	.-128    	; 0x1e4 <main+0x8>
 264:	8d 2f       	mov	r24, r29
 266:	3c df       	rcall	.-392    	; 0xe0 <backAndForth>
				ledOut(led);
 268:	d8 2f       	mov	r29, r24
 26a:	ab df       	rcall	.-170    	; 0x1c2 <ledOut>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	80 e7       	ldi	r24, 0x70	; 112
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x96>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0xa0>
				_delay_ms(100);
				break;
			case 8:
				led = nightRider(led);
 27c:	00 00       	nop
 27e:	b2 cf       	rjmp	.-156    	; 0x1e4 <main+0x8>
 280:	8d 2f       	mov	r24, r29
 282:	41 df       	rcall	.-382    	; 0x106 <nightRider>
				ledOut(led);
 284:	d8 2f       	mov	r29, r24
 286:	9d df       	rcall	.-198    	; 0x1c2 <ledOut>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	80 e7       	ldi	r24, 0x70	; 112
 28c:	92 e0       	ldi	r25, 0x02	; 2
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0xb2>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0xbc>
 298:	00 00       	nop
				_delay_ms(100);
				break;
			case 16:
				sevenSegment(1234);
 29a:	a4 cf       	rjmp	.-184    	; 0x1e4 <main+0x8>
 29c:	82 ed       	ldi	r24, 0xD2	; 210
 29e:	94 e0       	ldi	r25, 0x04	; 4
 2a0:	4e df       	rcall	.-356    	; 0x13e <sevenSegment>
 2a2:	8f ec       	ldi	r24, 0xCF	; 207
 2a4:	97 e0       	ldi	r25, 0x07	; 7
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <main+0xca>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0xd0>
 2ac:	00 00       	nop
				_delay_ms(1);
				break;
			default:
				ledOut(0);
 2ae:	9a cf       	rjmp	.-204    	; 0x1e4 <main+0x8>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	87 df       	rcall	.-242    	; 0x1c2 <ledOut>
				break;
 2b4:	97 cf       	rjmp	.-210    	; 0x1e4 <main+0x8>

000002b6 <__umulhisi3>:
 2b6:	a2 9f       	mul	r26, r18
 2b8:	b0 01       	movw	r22, r0
 2ba:	b3 9f       	mul	r27, r19
 2bc:	c0 01       	movw	r24, r0
 2be:	a3 9f       	mul	r26, r19
 2c0:	70 0d       	add	r23, r0
 2c2:	81 1d       	adc	r24, r1
 2c4:	11 24       	eor	r1, r1
 2c6:	91 1d       	adc	r25, r1
 2c8:	b2 9f       	mul	r27, r18
 2ca:	70 0d       	add	r23, r0
 2cc:	81 1d       	adc	r24, r1
 2ce:	11 24       	eor	r1, r1
 2d0:	91 1d       	adc	r25, r1
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
